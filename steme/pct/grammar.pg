# $Id$

=begin overview

This is the grammar for Steme written as a sequence of Perl 6 rules.

=end overview

grammar Steme::Grammar is HLL::Grammar {

rule TOP {
    <statement>*
    [ $ || <panic: 'Syntax error'> ]
}

##  this <ws> rule treats # as "comment to eol"
token ws {
    <!ww>
    [ ';' \N* \n? | \s+ ]*
}

rule statement {
    '(' ~ ')' <form>
}

token form {
    | <special>
    | <simple>
}

proto token special { <...> }

rule special:sym<macro> {
    <sym>
    <symbol>
    <pattern=.item>
    <action=.quote>
}

rule special:sym<export> {
    <sym>
    <ident>
}

rule special:sym<if> {
    <sym>
    <cond=item>
    <iftrue=item>
    <iffalse=item>
}

rule special:sym<define> {
    <sym>
    <var=symbol>
    <val=item>
}

rule special:sym<let> {
    <sym>
    '('
    [
        '('
        <var=symbol>
        <val=item>
        ')'
    ]+
    ')' {*}                                      #= begin
    <statement>+
}

rule special:sym<lambda> {
    <sym>
    '('
    [
        <var=symbol>
    ]*
    ')' {*}                                      #= begin
    <statement>+
}

rule special:sym<library> {
    <sym>
    '('
    [<ns=ident> ]+
    ')' {*}                                      #= begin
    <statement>+
}

rule special:sym<import> {
    <sym>
    $<libs>=('('
    [<ns=ident> ]+
    ')' )+
}

rule special:sym<hllimport> {
    <sym>
    $<libs>=('('
    <hll=ident> [<ns=ident> ]+
    ')' )+
}

rule simple {
    <cmd=.item>
    [<item> ]*
}

proto token value { <...> }


token integer { \d+ }

proto token quote { <...> }
token quote:sym<apos> { <?[']>            <quote_EXPR: ':q'>  }
token quote:sym<dblq> { <?["]>            <quote_EXPR: ':qq'> }

proto token item { <...> }
token item:sym<integer> { <integer> }
token item:sym<quote>   { <quote> }
token item:sym<symbol> { <symbol> }
token item:sym<statement> { <statement> }

token symbol {
    <symbol=ident>
}

token ident {
    [<!before <[()'"]> | <digit> > \S]+
}

}
