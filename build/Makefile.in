# $Id$

# arguments we want to run parrot with
PARROT_ARGS =

# values from parrot_config
PREFIX        = @prefix@
LIB_DIR       = @libdir@
VERSION       = @versiondir@
LOAD_EXT      = @load_ext@
O             = @o@
EXE           = @exe@
MAKE          = @make_c@
PERL          = @perl@
RM_F          = @rm_f@
HAS_ICU       = @has_icu@

# Various paths
PARROT_DYNEXT = $(LIB_DIR)$(VERSION)/dynext
NQP           = $(LIB_DIR)$(VERSION)/library/nqp-rx.pbc
PCT           = $(LIB_DIR)$(VERSION)/library/PCT.pbc
PMC_DIR       = src/pmc
OPSDIR        = src/ops
OPSLIB        = steme
OPS_FILE      = src/ops/steme.ops

# Setup some commands
PARROT        = $(PREFIX)/bin/parrot$(EXE)
CAT           = $(PERL) -MExtUtils::Command -e cat
PBC_TO_EXE    = $(PREFIX)/bin/pbc_to_exe$(EXE)

SOURCES = steme.pir \
  src/gen_grammar.pir \
  src/gen_actions.pir \
  src/gen_builtins.pir \
  $(STEME_GROUP)

BUILTINS_PIR = \
  src/builtins/say.pir \
  src/builtins/math.pir \
  src/builtins/cmp.pir \
  src/builtins/library.pir \
  src/builtins/control.pir \

# PMCS        = steme
# PMC_SOURCES = $(PMC_DIR)/steme.pmc
# STEME_GROUP  = $(PMC_DIR)/steme_group$(LOAD_EXT)

CLEANUPS = \
  steme.pbc \
  steme.c \
  *.manifest \
  *.pdb \
  steme$(O) \
  steme$(EXE) \
  src/gen_*.pir \
  src/gen_*.pm \
  $(PMC_DIR)/*.h \
  $(PMC_DIR)/*.c \
  $(PMC_DIR)/*.dump \
  $(PMC_DIR)/*$(O) \
  $(PMC_DIR)/*$(LOAD_EXT) \
  $(PMC_DIR)/*.exp \
  $(PMC_DIR)/*.ilk \
  $(PMC_DIR)/*.manifest \
  $(PMC_DIR)/*.pdb \
  $(PMC_DIR)/*.lib \
  $(PMC_DIR)/objectref.pmc \
  $(OPSDIR)/*.h \
  $(OPSDIR)/*.c \
  $(OPSDIR)/*$(O) \
  $(OPSDIR)/*$(LOAD_EXT) \

HARNESS = $(PERL) t/harness --keep-exit-code --icu=$(HAS_ICU)
HARNESS_JOBS = $(HARNESS) --jobs

# the default target
all: steme$(EXE)

##  targets for building a standalone executable
steme$(EXE): steme.pbc
	$(PBC_TO_EXE) steme.pbc
	@win32_libparrot_copy@

# the compiler .pbc
steme.pbc: Makefile $(PARROT) $(SOURCES) $(BUILTINS_PIR)
	$(PARROT) $(PARROT_ARGS) -o steme.pbc steme.pir

src/gen_grammar.pir: $(PARROT) $(NQP) src/pct/grammar.pg
	$(PARROT) $(PARROT_ARGS) $(NQP) \
		--target=pir \
	    --output=src/gen_grammar.pir \
	    src/pct/grammar.pg

src/gen_actions.pir: $(PARROT) $(NQP) $(PCT) src/pct/actions.pm
	$(PARROT) $(PARROT_ARGS) $(NQP) --output=src/gen_actions.pir \
	    --encoding=fixed_8 --target=pir src/pct/actions.pm

src/gen_builtins.pir: Makefile build/gen_builtins_pir.pl
	$(PERL) build/gen_builtins_pir.pl $(BUILTINS_PIR) > src/gen_builtins.pir

##  local copy of Parrot
parrot: parrot/parrot_config build/PARROT_REVISION
	$(PERL) build/gen_parrot.pl

parrot/parrot_config:
	@echo "Don't see parrot/parrot_config."

test: steme$(EXE)
	$(PERL) t/harness t/

# Run a single test
t/*.t t/*/*.t t/*/*/*.t: all Test.pir
	@$(HARNESS_WITH_FUDGE) --verbosity=1 $@

##  cleaning
clean:
	$(RM_F) $(CLEANUPS)

distclean: realclean

realclean: clean
	$(RM_F) src/utils/Makefile Makefile

testclean:


##  miscellaneous targets
# a listing of all targets meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  all:               steme.exe"
	@echo "                     This is the default."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run Rakudo's sanity tests."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  distclean:         Removes also anything built, in theory."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

Makefile: build/Makefile.in
	@echo ""
	@echo "warning: Makefile is out of date... re-run Configure.pl"
	@echo ""

manifest:
	echo MANIFEST >MANIFEST
	git ls-files | $(PERL) -ne '/^\./ || print' >>MANIFEST

release: manifest
	[ -n "$(VERSION)" ] || ( echo "\nTry 'make release VERSION=yyyymm'\n\n"; exit 1 )
	[ -d steme-$(VERSION) ] || ln -s . steme-$(VERSION)
	$(PERL) -ne 'print "steme-$(VERSION)/$$_"' MANIFEST | \
	    tar -zcv -T - -f steme-$(VERSION).tar.gz
	rm steme-$(VERSION)

